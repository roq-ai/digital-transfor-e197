generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model alternative {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  text        String   @db.VarChar(255)
  question_id String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  question    question @relation(fields: [question_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model dimension {
  id              String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String       @db.VarChar(255)
  organization_id String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  domain          domain[]
}

model domain {
  id           String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name         String     @db.VarChar(255)
  dimension_id String     @db.Uuid
  created_at   DateTime   @default(now()) @db.Timestamp(6)
  updated_at   DateTime   @default(now()) @db.Timestamp(6)
  dimension    dimension  @relation(fields: [dimension_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  question     question[]
}

model organization {
  id          String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  description String?     @db.VarChar(255)
  image       String?     @db.VarChar(255)
  name        String      @db.VarChar(255)
  created_at  DateTime    @default(now()) @db.Timestamp(6)
  updated_at  DateTime    @default(now()) @db.Timestamp(6)
  user_id     String      @db.Uuid
  tenant_id   String      @db.VarChar(255)
  dimension   dimension[]
  user        user        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model question {
  id          String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  text        String        @db.VarChar(255)
  domain_id   String        @db.Uuid
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  alternative alternative[]
  domain      domain        @relation(fields: [domain_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  organization organization[]
}
